#!/usr/bin/python

import argparse
import os
import os.path

def writeScriptAndRun(scriptRunner, script, scriptPath):
  with open(scriptPath, "w") as scriptFile:
    scriptFile.write(script)
  os.chmod(scriptPath, 0770)
  os.system("%s %s" % (scriptRunner, scriptPath))

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument("-m", "--machine")
  parser.add_argument("-j", "--job")
  parser.add_argument("-t", "--threads", type=int, default=1)
  parser.add_argument("-p", "--processors", type=int, default=1)
  parser.add_argument("-n", "--numParticles", type=int)
  parser.add_argument("-f", "--forceRun", action='store_true')
  parser.add_argument("-x", "--runSlow", action='store_true')
  args = parser.parse_args()

  isMultithreaded = True if (args.job == "openmp" or args.job == "mpi") else False
  jobName = None
  if isMultithreaded:
    jobName = "%s-%s-n%d-p%d-t%d" % (args.job, args.machine, args.numParticles, args.processors, args.threads)
  else:
    jobName = "%s-%s-n%d" % (args.job, args.machine, args.numParticles)

  runRemotely = True if (args.machine == "hopper" or args.machine == "stampede") else False

  localRoot = os.path.realpath("%s/../.." % (os.path.dirname(os.path.realpath(__file__))))
  remoteRoot = "~/cs267-hw2"

  localDataDir = "%s/report/data" % (localRoot)
  remoteDataDir = "%s/report/data" % (remoteRoot)
  dataDir = remoteDataDir if runRemotely else localDataDir

  outputFileName = "%s/%s.out" % (dataDir, jobName)
  saveFileName = "%s/%s.save" % (dataDir, jobName)

  localTmpDir = "%s/tmp" % (localDataDir)
  remoteTmpDir = "%s/tmp" % (localDataDir)
  tmpDir = remoteTmpDir if runRemotely else localTmpDir

  localExecDir = "%s/particles" % (localRoot)
  remoteExecDir = "%s/particles" % (remoteRoot)
  execDir = remoteExecDir if runRemotely else localExecDir

  runSlowOpt = "" if args.runSlow else "-no"

  #########
  # Run job
  #########
  
  if (not args.forceRun) and os.path.isfile(saveFileName) and os.path.isfile(outputFileName):
    print "Output files already exist.  Run with -f to force rerunning."
    exit(0)

  if args.machine == "hopper":
    actualJobScript = "%s/%s -n %d -o %s %s > %s" % (execDir, args.job, args.numParticles, saveFileName, runSlowOpt, outputFileName)
    jobRunnerScript = """#!/bin/bash
#PBS -V
#PBS -l mppwidth=%d
#PBS -l mppdepth=%d
#PBS -S /bin/bash
#PBS -l walltime=0:10:00
#PBS -j oe
#PBS -A mp309

cd $PBS_O_WORKDIR

export OMP_NUM_THREADS=%d
aprun -d %d -n %d -N %d %s""" % (
      args.processors,
      args.threads,
      args.threads,
      args.threads,
      args.processors,
      args.processors,
      actualJobScript
    )
    jobRunnerScriptName = "%s/jobRunner-%s" % (localTmpDir, jobName)
    print "Running ``%s'' on %s" % (actualJobScript, args.machine)
    writeScriptAndRun("qsub", jobRunnerScript, jobRunnerScriptName)
  
  elif args.machine == "stampede":
    actualJobScript = "%s/%s -n %d -o %s > %s" % (execDir, args.job, args.numParticles, saveFileName, outputFileName)
    jobRunnerScript = """#!/bin/bash
#SBATCH -J %s          	# job name
#SBATCH -n 1             	# total number of mpi tasks requested
#SBATCH -p gpu     		# queue (partition) -- can use gpu or gpudev
#SBATCH -t 00:10:00        	# run time (hh:mm:ss) - 10 minutes

ibrun %s
%s/autocorrect -s %s""" % (
      jobName,
      actualJobScript,
      execDir,
      saveFileName
    )
    jobRunnerScriptName = "%s/jobRunner-%s" % (localTmpDir, jobName)
    print "Running ``%s'' on %s" % (actualJobScript, args.machine)
    writeScriptAndRun("sbatch", jobRunnerScript, jobRunnerScriptName)
  
  elif args.machine == "laptop":
    os.chdir(localExecDir)
    script = "./%s -n %d -o %s %s > %s" % (args.job, args.numParticles, saveFileName, runSlowOpt, outputFileName)
    print "Running ``%s''" % (script)
    os.system(script)
  
  else:
    error("unknown machine type")

if __name__ == "__main__":
  main()